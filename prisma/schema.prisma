// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(auto()) @map("_id") @db.ObjectId
  email                     String    @unique
  password                  String
  name                      String
  role                      String    @default("user")
  Profile                   Profile?
  accountVerified           Boolean   @default(false)
  verificationCode          Int?
  verificationCodeExpires   DateTime?
  resetPasswordToken        String?
  resetPasswordTokenExpires DateTime?
  Posts                     Post[]
  Comments                  Comment[]
  Likes                     Like[]
  Dislikes                  Dislike[]
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

model Profile {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  bio       String?
  avatarUrl String?
  phone     String?
  userId    String  @unique @db.ObjectId
  User      User    @relation(fields: [userId], references: [id])
}

model Post {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  content        String
  slug           String         @unique
  images         String[]
  active         Boolean        @default(true)
  authorId       String         @db.ObjectId
  Author         User           @relation(fields: [authorId], references: [id])
  Comments       Comment[]
  Likes          Like[]
  Dislikes       Dislike[]
  PostCategories PostCategory[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Category {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String         @unique
  active         Boolean        @default(true)
  PostCategories PostCategory[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model PostCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  postId     String   @db.ObjectId
  categoryId String   @db.ObjectId
  Post       Post     @relation(fields: [postId], references: [id])
  Category   Category @relation(fields: [categoryId], references: [id])

  @@unique([postId, categoryId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  active    Boolean  @default(true)
  postId    String   @db.ObjectId
  authorId  String   @db.ObjectId
  Post      Post     @relation(fields: [postId], references: [id])
  Author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Dislike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}
